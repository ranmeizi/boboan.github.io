{"pageProps":{"postData":{"id":"8","title":"React和Vue组件通信","tags":["react","vue"],"date":"2020-09-09","image":"/boboan.github.io/posts/8/1.png","abstract":"","contentHtml":"<h2>测试一下可行性</h2>\n<p>js上感觉完全可行，样式可能会有冲突</p>\n<h2>桥梁</h2>\n<p>用发布订阅模式，创建一个事件对象</p>\n<pre><code class=\"language-javascript\">// 执行某操作后需要触发别的组件行为的时候,绑定一个bus\nfunction EventBus() {\n    this.eventList = {}\n}\n// 订阅事件\nEventBus.prototype.on = function (eventName, callback) {\n    const eList = this.eventList\n    if (eventName in eList) {\n        // 有这个key\n        eList[eventName].push(callback)\n    } else {\n        // 没有key\n        eList[eventName] = [callback]\n    }\n}\n// 解绑事件\nEventBus.prototype.un = function (eventName, callback) {\n    const eList = this.eventList[eventName] || [] //容错\n    for (let i = 0; i &#x3C; eList.length; i++) {\n        if (eList[i] === callback) {\n            // 删除这个callback\n            eList.splice(i, 1)\n            if (eList.length === 0) {\n                // delete回收\n                delete this.eventList[eventName]\n            }\n            return\n        }\n    }\n}\nEventBus.prototype.emit = function (eventName, data) {\n    (this.eventList[eventName] || []).forEach(cb => cb(data))\n}\n\nwindow.EB = new EventBus()\n</code></pre>\n<h2>创建测试项目</h2>\n<p>create-react-app创建个项目\nvue-cli创建个项目</p>\n<h2>react项目的工作</h2>\n<p>身为四年级的react作为最好的老大哥，去render vue\nvue项目作为一个count计数器 功能的组件</p>\n<h3>1.告知vue 要渲染，并准备一个dom作为容器</h3>\n<h3>2.功能按钮，触发vue count++</h3>\n<pre><code class=\"language-javascript\">function App() {\n  function renderVue() {\n    window.EB.emit('vue:render me','#bpp')\n  }\n  function count() {\n    window.EB.emit('vue:let me ++')\n  }\n  return (\n    &#x3C;div className=\"App\">\n      &#x3C;header className=\"App-header\">\n        &#x3C;img src={logo} className=\"App-logo\" alt=\"logo\" />\n        &#x3C;p>\n          Edit &#x3C;code>src/App.js&#x3C;/code> and save to reload.\n        &#x3C;/p>\n        &#x3C;a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        &#x3C;/a>\n        &#x3C;div id='bpp'>&#x3C;/div>\n        &#x3C;button onClick={renderVue}>渲染vue count&#x3C;/button>\n        &#x3C;button onClick={count}>vue count++&#x3C;/button>\n      &#x3C;/header>\n    &#x3C;/div>\n  );\n}\n</code></pre>\n<h2>vue项目的工作</h2>\n<h3>1.延迟渲染，等到react叫他渲染在渲染</h3>\n<pre><code class=\"language-javascript\">import Vue from 'vue'\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\n\n\nwindow.EB.on('vue:render me', (elementId) => {\n  new Vue({\n    render: h => h(App),\n  }).$mount(elementId)\n})\n</code></pre>\n<h3>2.有自己的一个count状态值监听事件，修改count值</h3>\n<pre><code class=\"language-javascript\">export default {\n  name: \"HelloWorld\",\n  data() {\n    return {\n      count: 0,\n    };\n  },\n  mounted() {\n    window.EB.on(\"vue:let me ++\", this.jiajia);\n  },\n  beforeDestroy() {\n    window.EB.un(\"vue:let me ++\", this.jiajia);\n  },\n  methods: {\n    jiajia() {\n      this.count++;\n    },\n  },\n  props: {\n    msg: String,\n  },\n};\n</code></pre>\n<h2>打包</h2>\n<p>把vue 资源路径改成/vue好管理\n在react项目html页引入vue静态资源\n<img src=\"/boboan.github.io/posts/8/1.png\"></p>\n<h2>效果</h2>\n<p><img src=\"/boboan.github.io/posts/8/2.gif\"></p>\n<h2>结论</h2>\n<p>没啥用，挺好玩的，纯js的，css还可能污染，不过不用在意2个项目的环境，反正运行的都是js代码</p>\n"},"allTags":["nextjs","remark","typescript","taro","webpack","loader","小程序插件","javascript","react","extention","github page","screeps","nodejs","闲的","canvas","promise","vue","Parcel","eggjs","extension"]},"__N_SSG":true}