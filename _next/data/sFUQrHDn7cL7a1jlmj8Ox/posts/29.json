{"pageProps":{"postData":{"id":"29","title":"【ts类型体操】猜数字","tags":["typescript"],"date":"2022-11-02","image":"/boboan.github.io/posts/29/1.png","abstract":"来做一个好玩的猜数字游戏吧","contentHtml":"<p>来做一个好玩的猜数字游戏吧。\n<img src=\"/boboan.github.io/posts/29/1.png\">\n看一下游戏规则。</p>\n<blockquote>\n<p>通常由两个人玩，一方出数字，一方猜。出数字的人要想好一个没有重复数字的4个数，不能让猜的人知道。猜的人就可以开始猜。每猜一个数字，出数者就要根据这个数字给出几A几B，其中A前面的数字表示位置正确的数的个数，而B前的数字表示数字正确而位置不对的数的个数。\n如正确答案为 5234，而猜的人猜 5346，则是 1A2B，其中有一个5的位置对了，记为1A，而3和4这两个数字对了，而位置没对，因此记为 2B，合起来就是 1A2B。</p>\n</blockquote>\n<p>js 写猜数字好写，就是2个循环，那ts中怎么实现呢</p>\n<h2>extentds</h2>\n<p>extends 可以判断出 A 类型 是否是 B 类型的子类，对于 字符串，数字类型就相当于判断值相等</p>\n<h2>解构 infer</h2>\n<p>在<code>`${infer A}${infer B}`</code> 中 infer 相当于将结构的字符串值赋给一个类型 A 和 B ，递归一下就有了获取每一位的字符串的能力</p>\n<h2>范型递归</h2>\n<p>可以用 extends 作为终止条件，递归的调用类型，在递归中加入参数的传递，最后可以输出一个元祖类型当作结果</p>\n<pre><code class=\"language-ts\">   type Fn&#x3C;Arr extends 1[] = []> = Arr['length'] extends 5\n    ? Fn&#x3C;[...Arr, 1]>\n    : '结束'\n</code></pre>\n<h2>ts猜数字的实现</h2>\n<pre><code class=\"language-ts\">// +1\ntype Aplus1&#x3C;n extends number, arr extends 1[] = []> = n extends arr['length']\n    ? [...arr, 1]['length']\n    : Aplus1&#x3C;n, [...arr, 1]>\n\ntype Each&#x3C;char extends string, S extends string, charIndex extends number, index extends number = 0, A extends 0 | 1 = 0, B extends 0 | 1 = 1> =\n    S extends `${infer P}${infer Q}`\n    ? char extends P\n    ? charIndex extends index  // 不算\n    ? [1, 0]\n    // @ts-ignore\n    : Each&#x3C;char, Q, charIndex, Aplus1&#x3C;index>, 0, 1>\n    // @ts-ignore\n    : Each&#x3C;char, Q, charIndex, Aplus1&#x3C;index>, A, B>\n    : [A, B]\n\ntype Main&#x3C;S1 extends string, S2 extends string, index extends number = 0, A extends 1[] = [], B extends 1[] = []> =\n    S1 extends `${infer P}${infer Q}`\n    ? Each&#x3C;P, S2, index> extends [infer CA, infer CB]\n    ? Main&#x3C;Q, S2, Aplus1&#x3C;index>, CA extends 0 ? A : [...A, 1], CB extends 0 ? B : [...B, 1]>\n    : never\n    : [`A:${A['length']}`, `B:${B['length']}`]\n\ntype Questen1&#x3C;T extends string> = Main&#x3C;T, 'zengpengshabi'>\n</code></pre>\n"},"allTags":["nextjs","remark","typescript","taro","webpack","loader","小程序插件","javascript","react","extention","github page","screeps","nodejs","闲的","canvas","promise","vue","Parcel","eggjs","extension"]},"__N_SSG":true}