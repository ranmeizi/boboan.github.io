{"pageProps":{"postData":{"id":"18","title":"webpackplugin实现build模块上传","tags":["webpack"],"date":"2021-03-05","image":"/boboan.github.io/posts/18/1.png","abstract":"最近在玩screeps，screeps客户端自带一个ide，但用着不是很舒服，也不支持typescript，但官方提供了代码上传api可以把自己编译过后的模块上传，所以我想，能不能用webpack构建一个screeps项目，在build之后，调用screeps的api把代码上传上服务器。","contentHtml":"<p>最近在玩screeps，screeps客户端自带一个ide，但用着不是很舒服，也不支持typescript，但官方提供了代码上传api可以把自己编译过后的模块上传，所以我想，能不能用webpack构建一个screeps项目，在build之后，调用screeps的api把代码上传上服务器。</p>\n<h3>暴露 library</h3>\n<p>output.librarytarget：https://webpack.docschina.org/configuration/output/#outputlibrarytarget\nwebpack默认entry是不暴露任何东西给外界的，但screeps代码main.js必须暴露一个loop函数<code>module.exports={loop:()=>{}}</code>\n配置webpack的output.libraryTarget属性，来选择用什么方式暴露你的library，我要用<code>module.exports</code>暴露模块，所以我选择<code>commonjs2</code>方式</p>\n<h3>实现模块上传</h3>\n<p>查看webpack文档，在Plugins中有我需要的钩子\n<img src=\"/boboan.github.io/posts/18/1.png\">\nhttps://webpack.docschina.org/api/compiler-hooks/#emit\n/code api是上传字符串的代码，emit的的时机正好是获取到asset还未写入output目录，在emit时从compilation对象中拿到assets值，提交到api接口就能实现上传</p>\n<h3>options</h3>\n<pre><code class=\"language-javascript\">const path = require('path')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst ScreepUploadPlugin = require('./ScreepUploadPlugin')\n\nmodule.exports = {\n  entry: '/src/main.ts',\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        use: 'ts-loader',\n        exclude: /node_modules/,\n      },\n    ],\n  },\n  resolve: {\n    extensions: ['.tsx', '.ts', '.js'],\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new ScreepUploadPlugin()\n  ],\n  output: {\n    filename: 'main.js',\n    libraryTarget: 'commonjs2',\n    path: path.resolve(__dirname, '../dist'),\n  },\n}\n</code></pre>\n<h3>Plugin</h3>\n<pre><code class=\"language-javascript\">const https = require('https');\nconst { email, password, branch } = require('../config/screeps')\n\nfunction upload(data) {\n  const options = {\n    hostname: 'screeps.com',\n    port: 443,\n    path: '/api/user/code',\n    method: 'POST',\n    auth: email + ':' + password,\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8'\n    }\n  }\n  return new Promise((resolve, reject) => {\n    const req = https.request(options, (res) => {\n      resolve(res)\n    });\n\n    req.on('error', e => {\n      reject(e)\n    })\n    req.write(JSON.stringify(data));\n    req.end();\n  })\n}\n\nclass ScreepsUploadPlugin {\n  apply(compiler) {\n    compiler.hooks.emit.tapAsync(\n      'ScreepsUploadPlugin',\n      (compilation, callback) => {\n        // Do something async...\n        const data = {\n          branch,\n          modules: {}\n        };\n        const REG = new RegExp('([^\\..]+)\\..+')\n        for (let module in compilation.assets) {\n          const name = module.replace(REG, '$1')\n          data.modules[name] = compilation.assets[module]._value\n        }\n        upload(data).then(res => {\n          res.on('data', (d) => {\n            console.log('ScreepsUploadPlugin success', d.toString())\n          });\n          callback();\n        }).catch(err => {\n          console.log('ScreepsUploadPlugin error', 'upload fail!', err)\n          callback();\n        })\n      }\n    );\n  }\n}\n\nmodule.exports = ScreepsUploadPlugin\n</code></pre>\n"},"allTags":["nextjs","remark","typescript","taro","webpack","loader","小程序插件","javascript","react","extention","github page","screeps","nodejs","闲的","canvas","promise","vue","Parcel","eggjs","extension"]},"__N_SSG":true}