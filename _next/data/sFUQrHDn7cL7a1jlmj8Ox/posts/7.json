{"pageProps":{"postData":{"id":"7","title":"React实现数据驱动的tab页缓存","tags":["react"],"date":"2020-08-22","image":"/boboan.github.io/posts/7/1.gif","abstract":"在开发后台管理页面的时候，会遇到缓存 Tab 页面数据的需求。在开发时也希望能够使用数组驱动的方式控制 Tab 页的缓存，并且使用 API 进一步控制 tab 页缓存或者其他页缓存。 之前关注的开发者新写了一个模块，正好满足了我的需求","contentHtml":"<p>在开发后台管理页面的时候，会遇到缓存Tab页面数据的需求。在开发时也希望能够使用数组驱动的方式控制Tab页的缓存，并且使用API进一步控制tab页缓存或者其他页缓存。\n之前关注的开发者新写了一个模块，正好满足了我的需求\nreact-activation:<a href=\"https://github.com/CJY0208/react-activation\">https://github.com/CJY0208/react-activation</a>\n原理应该是把Alive组件下的dom挂载到Provider组件的display:none的一个节点，当路由切回来时，在从provider中找之前挂在的alive dom。作者已经帮我们实现了，用就是了。\n<img src=\"/boboan.github.io/posts/7/1.gif\"></p>\n<h2>用法</h2>\n<p>使用react-activation提供的KeepAlive组件包裹你的页面组件，控制KeepAlive的when值\n作者提供了demo：<a href=\"https://codesandbox.io/s/keguanbideyifangwenluyou-tab-shilikeanluyoucanshufenduofenhuancun-ewycx\">可关闭的路由 tabs 示例</a>\n但这个是API控制的，我更希望使用一个[]数据来驱动tabs和页面缓存</p>\n<h2>数据驱动</h2>\n<h3>改变数据</h3>\n<p>使用redux管理这个数据，建立了一个tabs数组，我希望tabs和页面是否被缓存，都是响应这个数组。\n我写了2个action去操作这个tabs,新增,和删除</p>\n<pre><code class=\"language-javascript\">// 新增tab\nexport function pushTab({url,title}) {\n  const { tabs } = getState()\n  push(url)\n  // 在tabs没有的加上\n  if (tabs.findIndex(item => item.url === url) &#x3C; 0) {\n    tabs.push({\n      url,\n      title\n    })\n    dispatch({\n      type: ActionTypes.SET_TABS,\n      tabs: tabs\n    })\n  }\n}\n// 关闭这个tab\nexport function removeTab({ url }) {\n  const { tabs } = getState()\n  let newTabs = tabs.filter(item => item.url !== url)\n  push(newTabs[newTabs.length - 1].url)\n  dispatch({\n    type: ActionTypes.SET_TABS,\n    tabs: newTabs\n  })\n}\n</code></pre>\n<h3>响应</h3>\n<p>然后我希望redux中的tabs的变化，能触发我的视图更新，用React-Redux提供的connect将store中的tabs绑定到组件上。当tabs发生变化时，我的缓存组件就能响应到，从而改变keepAlive的when值，实现缓存控制</p>\n<pre><code class=\"language-javascript\">import React from 'react'\nimport KeepAlive from 'react-activation'\nimport { connect } from 'react-redux'\n\nexport default function withAliveComponent(Component) {\n  // 包裹一层KeepAlive\n  const wrapAliveComponent = function (props) {\n    const id = props.location.pathname\n    // 当url存在与tabs数组中，保持缓存\n    return &#x3C;KeepAlive id={id} when={props.tabs.findIndex(item => item.url === id) >= 0}>\n      &#x3C;Component {...props} />\n    &#x3C;/KeepAlive>\n  }\n  // 绑定store中的tabs\n  return connect(state => {\n    return {\n      tabs: state.tabs\n    }\n  })(wrapAliveComponent)\n}\n</code></pre>\n<h3>更多action</h3>\n<p>当组件已经能响应tabs的变化时，添加更多功能【关闭/关闭其他/关闭到右侧/关闭全部】，通过写不同的action操作tabs数组就可以了\n<img src=\"/boboan.github.io/posts/7/2.gif\"></p>\n"},"allTags":["nextjs","remark","typescript","taro","webpack","loader","小程序插件","javascript","react","extention","github page","screeps","nodejs","闲的","canvas","promise","vue","Parcel","eggjs","extension"]},"__N_SSG":true}