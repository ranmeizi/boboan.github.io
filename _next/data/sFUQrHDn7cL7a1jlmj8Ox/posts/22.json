{"pageProps":{"postData":{"id":"22","title":"[extention] 拓展跨域 ajax劫持","tags":["extention"],"date":"2021-06-16","image":"/boboan.github.io/posts/22/1.gif","abstract":" 先说一下，这绝对不是一个安全的选择！ 而且，只适合在开发过程中使用 好了，但是在开发过程中难免会请求到跨域的资源，可能是个测试数据，可能是个接口，这是因为浏览器的同源策略阻止了你的请求结果","contentHtml":"<h2>先说一下，这绝对不是一个安全的选择</h2>\n<p>而且，只适合在开发过程中使用\n好了，但是在开发过程中难免会请求到跨域的资源，可能是个测试数据，可能是个接口，这是因为浏览器的同源策略阻止了你的请求结果</p>\n<blockquote>\n<p><strong>同源策略</strong>是一个重要的安全策略，它用于限制一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Origin\">origin</a>的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。\n<strong>同源</strong>的<strong>定义</strong>\n如果两个 URL 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol\">protocol</a>、<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Port\" title=\"Currently only available in English (US)\">port (en-US)</a> (如果有指定的话)和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Host\">host</a> 都相同的话，则这两个 URL 是<em>同源</em>。这个方案也被称为“协议/主机/端口元组”，或者直接是 “元组”。（“元组” 是指一组项目构成的整体，双重/三重/四重/五重/等的通用形式）。</p>\n</blockquote>\n<p>这个方案的优点就是快，适合开发，加载一个chrome拓展插件去劫持ajax，利用background.js发送请求绕过同源策略。</p>\n<p>项目地址：https://gitee.com/boboanzuiniubi/ext-xhr-proxy</p>\n<h2>先看看效果</h2>\n<p><img src=\"/boboan.github.io/posts/22/1.gif\"></p>\n<h2>实现的原理</h2>\n<p><img src=\"/boboan.github.io/posts/22/2.png\"></p>\n<p>在 background.js 里发送的请求是不会跨域的</p>\n<p>加载了拓展插件，会有一段个 content_script 的 script 注入到你的页面(content_script 与网站的js是隔离开的，他们共享的只有document，他相对安全)，这个 script 中包含一些 chrome 浏览器的 api，content_script 在这里利用浏览器的消息 api 作为网站与 background 间的消息接口。</p>\n<p>content_script 还有一个另外的作用，是他用 document 注入了一个 script 标签（这里称为 inject_script )，注入的 inject_script 并没有与网站隔离，它可以访问你任何变量，这个项目就修改了 XMLHttpRequest 构造函数，使他返回一个 xhr 的代理，使所有对于xhr对象的操作（open/send...）都被 xhrProxy 拦截到了，实现了 ajax 劫持</p>\n<p>当 xhrProxy 对象拦截到需要被代理的请求时，会通过 postMessage 向 content_script 发送消息 content_script 则会把消息转发到 background.js 在 background 中创建一个 xhr 对象发送真正的请求。在 response 后，再通过 content_script 原路返回 postMessage 到活动页面上 更新 xhrProxy 的状态实现代理请求</p>\n<h2>总结</h2>\n<p>先感谢一下 <a href=\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html\">小茗同学大佬的文章</a> 少走弯路发家致富。</p>\n<p>用 extention 处理跨域在开发过程中是十分省时间的，毕竟加载一个 chrome 插件比起一个代理服务要快得多。</p>\n<p>不过也想给大家提醒，我能使用 chrome 插件劫持 ajax 请求，我就能把请求转发给我自己的服务器，是很不安全的，并且 inject_script 就在往页面注入 js ，当你使用一个非官方的插件时，你不清楚他到底做了什么，比如你在浏览 steam 时正好开着一个不知名插件，那么你的 steam 账号 密码 token 登录状态啥的完全可能泄露给别人了。</p>\n"},"allTags":["nextjs","remark","typescript","taro","webpack","loader","小程序插件","javascript","react","extention","github page","screeps","nodejs","闲的","canvas","promise","vue","Parcel","eggjs","extension"]},"__N_SSG":true}