{"pageProps":{"postData":{"id":"11","title":"[decorator]react中实现vue watch","tags":["react","javascript"],"date":"2020-09-21","image":"/boboan.github.io/posts/11/1.png","abstract":"react 比如在开发 echarts 应用时，可能会通过一些值改变时，调用 echartsAPI 画图，hook 可以使用 useEffect 监听值改变，但是 class 组件我看没有很好的写法，要是可以按照 vue 的写法就很方便了。","contentHtml":"<p>react比如在开发echarts应用时，可能会通过一些值改变时，调用echartsAPI画图，hook可以使用useEffect监听值改变，但是class组件我看没有很好的写法，要是可以按照vue的写法就很方便了。</p>\n<h2>watch</h2>\n<pre><code class=\"language-javascript\">watch:{\n      // 当count值发生改变时\n      count(oldValue,newValue){\n            // ...\n      }\n}\n</code></pre>\n<h2>先在react中找一个合适的生命周期，可以获取到旧props和state</h2>\n<p>这个就很合适\n<img src=\"/boboan.github.io/posts/11/1.png\"></p>\n<h2>watch要做什么？</h2>\n<p>watch对象中的key就是我们监控的变量名，要通过对比新旧props/state中的该值，执行他的回调函数，并传入oldValue/newValue</p>\n<h2>写一个decorator给react声明周期添加watch功能</h2>\n<pre><code class=\"language-javascript\">function Watch(watchvalues) {\n    return function (target, name, descriptor) {\n        const fn = descriptor.value\n        descriptor.value = function (prevProps, prevState) {\n            // 识别watchvalues中的值，执行回调\n            Object.entries(watchvalues).forEach(([name, callback]) => {\n                const oldValue = prevProps[name] || prevState[name]\n                const newValue = this.props[name] || this.state[name]\n                if (oldValue !== newValue) {\n                    callback.apply(this, [oldValue, newValue])\n                }\n            })\n            fn.apply(this, arguments)\n        }\n        return descriptor\n    }\n}\n</code></pre>\n<p>通过decorator为componentDidUpdate()添加上面watch的行为，我们就可以通过传入一个对象，来描述我们要watch什么值了</p>\n<pre><code class=\"language-javascript\">export default class index extends Component {\n    state = { count: 0 }\n    @Watch({\n        count(oldValue, newValue) {\n            console.log(`count发生改变了,${oldValue}=>${newValue}`)\n        }\n    })\n    componentDidUpdate(prevProps, prevState) {\n        console.log('componentDidUpdate', prevProps, prevState)\n    }\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;button onClick={() => { this.setState({ count: this.state.count + 1 }) }}>++&#x3C;/button>\n            &#x3C;/div>\n\n        )\n    }\n}\n</code></pre>\n<p>嘿嘿，不用写if判断了\n<img src=\"/boboan.github.io/posts/11/2.png\"></p>\n"},"allTags":["nextjs","remark","typescript","taro","webpack","loader","小程序插件","javascript","react","extention","github page","screeps","nodejs","闲的","canvas","promise","vue","Parcel","eggjs","extension"]},"__N_SSG":true}