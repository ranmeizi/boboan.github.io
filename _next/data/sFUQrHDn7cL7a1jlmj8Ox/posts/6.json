{"pageProps":{"postData":{"id":"6","title":"[hooks学习笔记]怎么使用hooks达到逻辑的复用","tags":["react"],"date":"2020-07-03","image":"/boboan.github.io/posts/6/1.gif","abstract":"之前写 class 组件时，一些功能模块的一些 state/function，很难复用。 试过 create-react-class，把 state/function 按功能分小块一起拼装成一个 class，但是看起来还是不太舒服 react16.8 出了 hooks 之后，开始学习 hooks，感觉这样写的话会清晰一些，用例子带大家感受一下。","contentHtml":"<p>之前写class组件时，一些功能模块的一些state/function，很难复用。\n试过create-react-class，把state/function按功能分小块一起拼装成一个class，但是看起来还是不太舒服\nreact16.8出了hooks之后，开始学习hooks，感觉这样写的话会清晰一些，用例子带大家感受一下。\n例子放在github上:<a href=\"https://github.com/ranmeizi/hooks-example\">https://github.com/ranmeizi/hooks-example</a></p>\n<h2>小例子</h2>\n<p>写了3个canvas页面，对应了几个功能交叉的需求，是可以复用的</p>\n<ol>\n<li>画图\n<img src=\"/boboan.github.io/posts/6/1.gif\"></li>\n<li>画鼠标\n<img src=\"/boboan.github.io/posts/6/2.gif\"></li>\n<li>点击画图\n<img src=\"/boboan.github.io/posts/6/3.gif\"></li>\n</ol>\n<h2>从需求出发</h2>\n<p>分析一下这三个需求：</p>\n<ol>\n<li>这个需求是把图片绘制到canvas上，这是需求1，2，3都有的</li>\n<li>这个需求是鼠标移动时，在对应位置绘制鼠标的图片，绘制逻辑可以复用1的</li>\n<li>这个需求复用就更多了，①鼠标移动的时候绘制指针，②点击图片的时候更改指针，③点击canvas的时候绘制图片。①完全是需求2已经实现了的，②写一个click事件修改鼠标移动的IMG就可以完成，③写一个click事件用需求1画下图就可以了</li>\n</ol>\n<h2>用hooks实现</h2>\n<p>我学习的时候直接看的react的文档。链接：<a href=\"https://zh-hans.reactjs.org/docs/hooks-intro.html\">https://zh-hans.reactjs.org/docs/hooks-intro.html</a>\n用到的是自定义hooks，先抽出这个功能自己的状态和行为，写到自定义hooks里，然后可以暴露出一些接口出去，每个hooks是一个function，可以export出去，别的组件使用的时候import要用的hooks，就可以把逻辑拼装起来。</p>\n<ul>\n<li>自定义hooks\n我写了2个自定义hooks，分别对应画图和鼠标移动\n而且可以看到，useMouseImg这个hooks里也是引用了useDrawImg的，hooks里也是可以继续套hooks的</li>\n</ul>\n<pre><code class=\"language-javascript\">import { useState, useEffect, useRef } from 'react'\n// 画图\nexport function useDrawImg(canvas) {\n  function drawImage(x, y, img) {\n    const ctx = canvas.current.getContext('2d')\n    ctx.drawImage(img, x, y, img.width, img.height)\n  }\n  function clear() {\n    const { height, width } = canvas.current\n    const ctx = canvas.current.getContext('2d')\n    ctx.clearRect(0, 0, width, height)\n  }\n  return {\n    drawImage,\n    clear\n  }\n}\n// 鼠标移动\nexport function useMouseImg(canvas) {\n  const img = useRef(null)\n  const { drawImage, clear } = useDrawImg(canvas)\n  useEffect(() => {\n    console.log(111)\n    const el = canvas.current\n    el.addEventListener('mousemove', move)\n    return () => {\n      el.removeEventListener('mousemove', move)\n    }\n  }, [])\n\n  function move(e) {\n    const { offsetX: x, offsetY: y } = e\n    clear()\n    drawImage(x, y, img.current)\n  }\n  function setImg(image) {\n    img.current = image\n  }\n  return [img, setImg]\n}\n</code></pre>\n<ul>\n<li>组装hooks\nPage1 使用hooks暴露出的drawImage API画图就可以了，clear可以清除画布，没啥可组装的</li>\n</ul>\n<pre><code class=\"language-javascript\">import React, { useEffect, useRef } from 'react'\nimport { useDrawImg } from '../hooks/draw'\nimport lbxx from '../../assets/lbxx.png'\n\nexport default function () {\n  const canvas = useRef(null)\n  const { drawImage, clear } = useDrawImg(canvas)\n  useEffect(() => {\n    draw()\n  }, [])\n  function draw() {\n    let img = new Image()\n    img.src = lbxx\n    img.onload = () => drawImage(100, 100, img)\n  }\n  return &#x3C;div style={{ position: 'relative' }}>\n    &#x3C;canvas\n      style={{ position: 'absolute', top: 0, left: 0, border: '1px solid red' }}\n      ref={canvas} height='500' width='500'\n    />\n    {/* 按钮组 */}\n    &#x3C;div style={{ position: 'absolute', left: '400px', top: '20px' }}>\n      &#x3C;button onClick={draw}>画图&#x3C;/button>\n      &#x3C;button onClick={clear}>清除&#x3C;/button>\n    &#x3C;/div>\n  &#x3C;/div>\n}\n</code></pre>\n<p>Page2 更简单了，完全让hooks自己实现，只是在渲染后给hooks传了一个鼠标指针的图片</p>\n<pre><code class=\"language-javascript\">import React, { useEffect, useRef } from 'react'\nimport { useDrawImg, useMouseImg } from '../hooks/draw'\nimport lbxx from '../../assets/mouse.png'\nlet img = new Image()\nimg.src = lbxx\nexport default function () {\n  const canvas = useRef(null)\n  const [cursor, setImg] = useMouseImg(canvas)\n  useEffect(() => {\n    setImg(img)\n  }, [])\n  return &#x3C;div style={{ position: 'relative' }}>\n    &#x3C;canvas\n      style={{ position: 'absolute', top: 0, left: 0, border: '1px solid red', cursor: 'none' }}\n      ref={canvas} height='500' width='500'\n    />\n  &#x3C;/div>\n}\n\n</code></pre>\n<p>Page3 这块是组装hooks的部分了，Page3的需求用到了很多1，2里面都有的逻辑\n不过道理还是一样，是我在需求中说的，使用了2个click事件，去调用hooks中的api</p>\n<pre><code class=\"language-javascript\">import React, { useRef, useEffect } from 'react'\nimport { useDrawImg, useMouseImg } from '../hooks/draw'\nimport lbxx from '../../assets/mouse.png'\nimport fcskdrt from '../../assets/fcskdrt.jpg'\nimport nai200 from '../../assets/nai200.jpg'\nimport qi60 from '../../assets/qi60.jpg'\nimport kzp from '../../assets/kzp.jpg'\nimport wlssdmg from '../../assets/wlssdmg.jpg'\nlet img = new Image()\nimg.src = lbxx\nexport default function () {\n  const canvas = useRef(null)\n  const canvasCursor = useRef(null)\n  const { drawImage, clear } = useDrawImg(canvas)\n  const [cursor, setImg] = useMouseImg(canvasCursor)\n  useEffect(() => {\n    setImg(img)\n    // 绑定事件\n    canvasCursor.current.addEventListener('click', onCanvasClick)\n  }, [])\n  function onCanvasClick(e) {\n    const { offsetX: x, offsetY: y } = e\n    // 画画\n    if (cursor.current !== img) {\n      console.log(x, y, cursor.current)\n      drawImage(x, y, cursor.current)\n    }\n    // 改变光标\n    setImg(img)\n  }\n  function changeImg(e) {\n    setImg(e.target)\n  }\n  return &#x3C;div style={{ position: 'relative' }}>\n    &#x3C;canvas\n      style={{ position: 'absolute', top: 0, left: 0, border: '1px solid red', cursor: 'none' }}\n      ref={canvas} height='500' width='500'\n    />\n    &#x3C;canvas\n      style={{ position: 'absolute', top: 0, left: 0, border: '1px solid red', cursor: 'none' }}\n      ref={canvasCursor} height='500' width='500'\n    />\n    &#x3C;div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', position: 'absolute', left: '500px' }}>\n      &#x3C;img onClick={changeImg} src={fcskdrt} alt=\"\" />\n      &#x3C;img onClick={changeImg} src={nai200} alt=\"\" />\n      &#x3C;img onClick={changeImg} src={qi60} alt=\"\" />\n      &#x3C;img onClick={changeImg} src={kzp} alt=\"\" />\n      &#x3C;img onClick={changeImg} src={wlssdmg} alt=\"\" />\n    &#x3C;/div>\n  &#x3C;/div>\n}\n</code></pre>\n<p>可以看到我Page3中没有写任何画图的function，也没有监听鼠标移动，全是用之前写好的hooks实现的，这样就达到了逻辑复用，在我们开发中也可以把明显可复用的逻辑抽到hooks中写，节省自己的时间，代码也变得好维护。</p>\n"},"allTags":["nextjs","remark","typescript","taro","webpack","loader","小程序插件","javascript","react","extention","github page","screeps","nodejs","闲的","canvas","promise","vue","Parcel","eggjs","extension"]},"__N_SSG":true}