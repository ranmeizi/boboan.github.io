{"pageProps":{"postData":{"id":"2","title":"webpack简单多页面应用构建 webpack4+react构建crx项目","tags":["webpack"],"date":"2020-01-29","image":"/boboan.github.io/posts/2/1.png","abstract":"虽然说开发插件重要的不是页面而是功能性的 js，但是还是觉得 html 的部分使用框架开发页面更爽一些，所以我用 webpack 构建了一个 chrome 插件的项目，用来开发插件中的 popup/background/devtools 等页面\n不过我是个菜鸡，没想好功能，js 也写不利索，先把项目搭起来写个页面美美","contentHtml":"<p>虽然说开发插件重要的不是页面而是功能性的js，但是还是觉得html的部分使用框架开发页面更爽一些，所以我用webpack构建了一个chrome插件的项目，用来开发插件中的popup/background/devtools等页面</p>\n<p>不过我是个菜鸡，没想好功能，js也写不利索，先把项目搭起来写个页面美美\ngithub地址：<a href=\"https://github.com/ranmeizi/crx_webpack4\">https://github.com/ranmeizi/crx_webpack4</a></p>\n<h2>引用的包以及解决的问题</h2>\n<ol>\n<li>wabpack：  帮你打包项目</li>\n<li>babel 一系列：   各种语法的翻译机</li>\n<li>react/antd/less ：使用mvvm框架和ui框架和css框架开发html真的很爽</li>\n</ol>\n<h2>新建项目</h2>\n<p>使用 <code>npm init </code> 创建一个项目，新建一些文件夹，项目的目录结构大概是这样（你可以自己定）\n--myproject\n   --build   :用来存放webpack的入口和一些配置\n   --src  :你的代码\n   --package.json npm init帮你生成的项目配置文件</p>\n<h2>webpack</h2>\n<ul>\n<li>安装webpack\n需要安装 webpack 和webpack-cli\n<code>npm install webpack webpack-cli --save-dev</code></li>\n<li>启动webpack\n我们使用js来启动webpack，我们在build目录下新建一个build.js,这个js里面运行webpack()\n参考文档：<a href=\"https://www.webpackjs.com/api/node/\">https://www.webpackjs.com/api/node/</a></li>\n</ul>\n<p><img src=\"/boboan.github.io/posts/2/1.png\"></p>\n<p>添加一道script</p>\n<pre><code class=\"language-json\">\"scripts\": {\n    \"build\": \"node build/build.js\"\n  },\n</code></pre>\n<p>然后使用  <code>npm run build</code> 就可以运行这段build.js 这也就是我们webpack的入口啦。</p>\n<ul>\n<li>webpack的配置</li>\n</ul>\n<p>在build文件夹下再新建一个webpack.config.js这是webpack的配置参数\n<img src=\"/boboan.github.io/posts/2/2.png\"></p>\n<p>我们的需求是开发popup/background/devtools等页面，那就是 <strong>多入口</strong> 的webpack项目，很简单官网也有示例 <a href=\"https://www.webpackjs.com/configuration/entry-context/\">https://www.webpackjs.com/configuration/entry-context/</a>\n按照文档写法写好entry就好,我只写了2页面，<strong>同样的在src目录下新建你的入口js</strong></p>\n<pre><code class=\"language-javascript\">entry: {\n        'popup': ['./src/pages/popup/index.jsx'],\n        'background': ['./src/pages/background/index.jsx'],\n    },\n</code></pre>\n<p>新建2个入口的html文件\n<img src=\"/boboan.github.io/posts/2/3.png\"></p>\n<p><strong>第一个问题：htmlWebpackPlugin:什么？我打包了js然后html呢？</strong>\njs中是创建了react的根组件，但是和html没有任何联系，这时候需要引用<code>htmlWebpackPlugin</code>\nhtmlWebpackPlugin会把模板html页引用entry中的js，在chunks中要注明你引用的哪几个入口js，比如popup页，只需要引用popup的js</p>\n<pre><code class=\"language-javascript\">plugins: [//插件数组\n        new htmlWebpackPlugin({ //创建一个在内存中生成html页面插件的配置对象\n            template: path.join(__dirname, '../src/pages/background/background.html'),    //指定模版页面生成内存中的hmtl\n            filename: 'background.html', //指定生成的页面名称\n            chunks: ['background'] //entry中的入口名\n        }),\n        new htmlWebpackPlugin({\n            template: path.join(__dirname, '../src/pages/popup/popup.html'),\n            filename: 'popup.html',\n            chunks: ['popup']\n        })\n    ]\n</code></pre>\n<p><strong>第二个问题：babel：啊？为什么他不认识我的jsx和es567890？</strong>\n当我写好html和js后，兴高采烈的输入npm run build ，咔咔咔报错，不认识es6的语法，不认识jsx语法，那就要引入babel帮我们翻译\n安装这三个模块\n@babel/core\nbabel-loader\n@babel/preset-react\n<code>npm install @babel/core babel-loader @babel/preset-react  --save-dev</code>\n<strong>.js/.jsx文件</strong>\n在module/rules中添加js和jsx的loader</p>\n<pre><code class=\"language-javascript\">module: {\n        rules: [{\n            test: /\\.jsx?$/, // 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx\n            loader: 'babel-loader', // 加载模块 \"babel\" 是 \"babel-loader\" 的缩写\n            // include: resolve(\"/src\")\n            exclude: /node_modules/,\n        },\n        {\n            test: /\\.js?$/, // 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx\n            loader: 'babel-loader', // 加载模块 \"babel\" 是 \"babel-loader\" 的缩写\n            exclude: /node_modules/,\n        }]\n    },\n</code></pre>\n<p><strong>jsx</strong>\n在项目下新建babel配置文件.babelrc\n里面添加配置,就能识别jsx语法啦</p>\n<pre><code class=\"language-json\">\"presets\": [\"@babel/preset-react\"],\n</code></pre>\n<p><strong>第三个问题：babel：啊？我引用的antd怎么报@import错啊？</strong>\n安装babel-plugin-import模块\n<code>npm install babel-plugin-import --save-dev</code>\n在.babelrc中添加配置</p>\n<pre><code class=\"language-json\">\"plugins\": [\n    [\"import\", {\n      \"libraryName\": \"antd\",\n      \"libraryDirectory\": \"es\",\n      \"style\": true\n    }]\n  ]\n</code></pre>\n<p>肯定还会报错，因为识别不了style语法和less语法，所以再引入less和loader\n<code>npm install less less-loader style-loader css-loader --save-dev</code>\n在webpack.config.js中的module/rules添加一条less的配置</p>\n<pre><code class=\"language-javascript\">{\n            test: /\\.less$/,\n            use: [\n                'style-loader',\n                { loader: 'css-loader', options: { importLoaders: 1 } },\n                'less-loader'\n            ]\n        }\n</code></pre>\n<p><strong>第四个问题：crx:html页面弄好了，那我的manifest.json，conten_scripts什么的呢？</strong>\nmanifest.json，conten_scripts当作静态资源直接复制粘贴到dist目录下就好了\n用<code>shelljs</code>模块帮我们执行命令</p>\n<pre><code class=\"language-javascript\">//复制static文件架中的东西\nconst assetsPath = path.join(__dirname, '../dist');\nshell.rm('-rf', assetsPath);\nshell.mkdir('-p', assetsPath);\nshell.config.silent = true;\nshell.cp('-R', 'src/static/*', assetsPath);\nshell.config.silent = false;\n</code></pre>\n<p>终于不报错了，可以用框架开开心心的开发html页了\n<img src=\"/boboan.github.io/posts/2/4.png\"></p>\n"},"allTags":["nextjs","remark","typescript","taro","webpack","loader","小程序插件","javascript","react","extention","github page","screeps","nodejs","闲的","canvas","promise","vue","Parcel","eggjs","extension"]},"__N_SSG":true}